{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { API_URL, getHeaders, getFormDataHeaders, USE_MOCK } from './config';\nimport { mockUsers } from './mockData';\nexport const login = async (username, password) => {\n  if (USE_MOCK) {\n    const user = mockUsers.find(u => u.username === username && u.password === password);\n    if (!user) {\n      return {\n        success: false,\n        message: '用户名或密码错误'\n      };\n    }\n    const mockToken = `mock_token_${Date.now()}`;\n    const userData = Object.assign({}, user);\n    delete userData.password;\n    await AsyncStorage.setItem('token', mockToken);\n    await AsyncStorage.setItem('user', JSON.stringify(userData));\n    return {\n      success: true,\n      user: userData,\n      token: mockToken\n    };\n  }\n  try {\n    const response = await fetch(`${API_URL}/users/login`, {\n      method: 'POST',\n      headers: getHeaders(),\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || '登录失败，请检查用户名和密码'\n      };\n    }\n    await AsyncStorage.setItem('token', data.token);\n    await AsyncStorage.setItem('user', JSON.stringify(data.user));\n    return {\n      success: true,\n      user: data.user,\n      token: data.token\n    };\n  } catch (error) {\n    console.error('登录错误:', error);\n    return {\n      success: false,\n      message: '登录失败，请检查网络连接'\n    };\n  }\n};\nexport const register = async formData => {\n  if (USE_MOCK) {\n    const username = formData.get('username');\n    const nickname = formData.get('nickname');\n    if (mockUsers.some(u => u.username === username)) {\n      return {\n        success: false,\n        message: '用户名已存在'\n      };\n    }\n    const newUser = {\n      id: (mockUsers.length + 1).toString(),\n      username,\n      nickname,\n      avatar: 'uploads/default-avatar.png',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    mockUsers.push(newUser);\n    const mockToken = `mock_token_${Date.now()}`;\n    await AsyncStorage.setItem('token', mockToken);\n    await AsyncStorage.setItem('user', JSON.stringify(newUser));\n    return {\n      success: true,\n      user: newUser,\n      token: mockToken\n    };\n  }\n  try {\n    const response = await fetch(`${API_URL}/users/register`, {\n      method: 'POST',\n      headers: getFormDataHeaders(),\n      body: formData\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      return {\n        success: false,\n        message: data.message || '注册失败，请重试'\n      };\n    }\n    await AsyncStorage.setItem('token', data.token);\n    await AsyncStorage.setItem('user', JSON.stringify(data.user));\n    return {\n      success: true,\n      user: data.user,\n      token: data.token\n    };\n  } catch (error) {\n    console.error('注册错误:', error);\n    return {\n      success: false,\n      message: '注册失败，请检查网络连接'\n    };\n  }\n};\nexport const logout = async () => {\n  try {\n    await AsyncStorage.removeItem('token');\n    await AsyncStorage.removeItem('user');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('登出错误:', error);\n    return {\n      success: false,\n      message: '登出失败'\n    };\n  }\n};\nexport const checkAuthState = async () => {\n  try {\n    const token = await AsyncStorage.getItem('token');\n    const userStr = await AsyncStorage.getItem('user');\n    if (!token || !userStr) {\n      return {\n        isAuthenticated: false,\n        user: null\n      };\n    }\n    const user = JSON.parse(userStr);\n    if (USE_MOCK) {\n      return {\n        isAuthenticated: true,\n        user,\n        token\n      };\n    }\n    try {\n      const response = await fetch(`${API_URL}/users/validate`, {\n        method: 'GET',\n        headers: getHeaders(token)\n      });\n      if (!response.ok) {\n        await AsyncStorage.removeItem('token');\n        await AsyncStorage.removeItem('user');\n        return {\n          isAuthenticated: false,\n          user: null\n        };\n      }\n    } catch (error) {\n      console.error('验证token错误:', error);\n    }\n    return {\n      isAuthenticated: true,\n      user,\n      token\n    };\n  } catch (error) {\n    console.error('检查认证状态错误:', error);\n    return {\n      isAuthenticated: false,\n      user: null\n    };\n  }\n};","map":{"version":3,"names":["AsyncStorage","API_URL","getHeaders","getFormDataHeaders","USE_MOCK","mockUsers","login","username","password","user","find","u","success","message","mockToken","Date","now","userData","Object","assign","setItem","JSON","stringify","token","response","fetch","method","headers","body","data","json","ok","error","console","register","formData","get","nickname","some","newUser","id","length","toString","avatar","createdAt","toISOString","updatedAt","push","logout","removeItem","checkAuthState","getItem","userStr","isAuthenticated","parse"],"sources":["C:/Users/Administrator/Desktop/ctrip项目/mobile/api/authService.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { API_URL, getHeaders, getFormDataHeaders, USE_MOCK } from './config';\r\nimport { mockUsers } from './mockData';\r\n\r\n// 用户登录\r\nexport const login = async (username, password) => {\r\n  // 使用模拟数据\r\n  if (USE_MOCK) {\r\n    const user = mockUsers.find(u => u.username === username && u.password === password);\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '用户名或密码错误',\r\n      };\r\n    }\r\n    \r\n    // 生成模拟token\r\n    const mockToken = `mock_token_${Date.now()}`;\r\n    \r\n    // 保存token和用户信息\r\n    const userData = { ...user };\r\n    delete userData.password; // 不存储密码\r\n    \r\n    await AsyncStorage.setItem('token', mockToken);\r\n    await AsyncStorage.setItem('user', JSON.stringify(userData));\r\n    \r\n    return {\r\n      success: true,\r\n      user: userData,\r\n      token: mockToken,\r\n    };\r\n  }\r\n  \r\n  // 使用真实API\r\n  try {\r\n    const response = await fetch(`${API_URL}/users/login`, {\r\n      method: 'POST',\r\n      headers: getHeaders(),\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      return {\r\n        success: false,\r\n        message: data.message || '登录失败，请检查用户名和密码',\r\n      };\r\n    }\r\n    \r\n    // 保存token和用户信息\r\n    await AsyncStorage.setItem('token', data.token);\r\n    await AsyncStorage.setItem('user', JSON.stringify(data.user));\r\n    \r\n    return {\r\n      success: true,\r\n      user: data.user,\r\n      token: data.token,\r\n    };\r\n  } catch (error) {\r\n    console.error('登录错误:', error);\r\n    return {\r\n      success: false,\r\n      message: '登录失败，请检查网络连接',\r\n    };\r\n  }\r\n};\r\n\r\n// 用户注册\r\nexport const register = async (formData) => {\r\n  // 使用模拟数据\r\n  if (USE_MOCK) {\r\n    // 从formData中获取数据\r\n    const username = formData.get('username');\r\n    const nickname = formData.get('nickname');\r\n    \r\n    // 检查用户名是否已存在\r\n    if (mockUsers.some(u => u.username === username)) {\r\n      return {\r\n        success: false,\r\n        message: '用户名已存在',\r\n      };\r\n    }\r\n    \r\n    // 创建新用户\r\n    const newUser = {\r\n      id: (mockUsers.length + 1).toString(),\r\n      username,\r\n      nickname,\r\n      avatar: 'uploads/default-avatar.png',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    mockUsers.push(newUser);\r\n    \r\n    // 生成模拟token\r\n    const mockToken = `mock_token_${Date.now()}`;\r\n    \r\n    // 保存token和用户信息\r\n    await AsyncStorage.setItem('token', mockToken);\r\n    await AsyncStorage.setItem('user', JSON.stringify(newUser));\r\n    \r\n    return {\r\n      success: true,\r\n      user: newUser,\r\n      token: mockToken,\r\n    };\r\n  }\r\n  \r\n  // 使用真实API\r\n  try {\r\n    const response = await fetch(`${API_URL}/users/register`, {\r\n      method: 'POST',\r\n      headers: getFormDataHeaders(),\r\n      body: formData,\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      return {\r\n        success: false,\r\n        message: data.message || '注册失败，请重试',\r\n      };\r\n    }\r\n    \r\n    // 注册成功后自动登录\r\n    await AsyncStorage.setItem('token', data.token);\r\n    await AsyncStorage.setItem('user', JSON.stringify(data.user));\r\n    \r\n    return {\r\n      success: true,\r\n      user: data.user,\r\n      token: data.token,\r\n    };\r\n  } catch (error) {\r\n    console.error('注册错误:', error);\r\n    return {\r\n      success: false,\r\n      message: '注册失败，请检查网络连接',\r\n    };\r\n  }\r\n};\r\n\r\n// 用户登出\r\nexport const logout = async () => {\r\n  try {\r\n    await AsyncStorage.removeItem('token');\r\n    await AsyncStorage.removeItem('user');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('登出错误:', error);\r\n    return { \r\n      success: false,\r\n      message: '登出失败'\r\n    };\r\n  }\r\n};\r\n\r\n// 检查认证状态\r\nexport const checkAuthState = async () => {\r\n  try {\r\n    const token = await AsyncStorage.getItem('token');\r\n    const userStr = await AsyncStorage.getItem('user');\r\n    \r\n    if (!token || !userStr) {\r\n      return {\r\n        isAuthenticated: false,\r\n        user: null,\r\n      };\r\n    }\r\n    \r\n    const user = JSON.parse(userStr);\r\n    \r\n    // 在使用模拟数据的情况下，直接返回\r\n    if (USE_MOCK) {\r\n      return {\r\n        isAuthenticated: true,\r\n        user,\r\n        token,\r\n      };\r\n    }\r\n    \r\n    // 验证token有效性 (如果后端提供验证接口)\r\n    try {\r\n      const response = await fetch(`${API_URL}/users/validate`, {\r\n        method: 'GET',\r\n        headers: getHeaders(token),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        // token无效，清除存储的信息\r\n        await AsyncStorage.removeItem('token');\r\n        await AsyncStorage.removeItem('user');\r\n        \r\n        return {\r\n          isAuthenticated: false,\r\n          user: null,\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('验证token错误:', error);\r\n      // 如果只是网络错误，仍然可以使用存储的token\r\n    }\r\n    \r\n    return {\r\n      isAuthenticated: true,\r\n      user,\r\n      token,\r\n    };\r\n  } catch (error) {\r\n    console.error('检查认证状态错误:', error);\r\n    return {\r\n      isAuthenticated: false,\r\n      user: null,\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}